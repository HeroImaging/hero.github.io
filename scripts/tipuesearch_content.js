var tipuesearch = {"pages": [
{"title": "Home", "text": "Welcome to MICE Toolkit!  These pages will eventually contain all documentation for MICE Toolkit and will be updated regularly. Please check back soon for more information. MICE Toolkit (Medical Interactive Creative Environment) is a graphical programming user interface that is user friendly while still highly flexible. Complex image analysis processes can be constructed rapidly, and users can easily share workflows with the community in a standardized way, which makes it an ideal platform for research. The aim is to make advanced and complex  image processing and analysis available to all professionals, including medical fields such as radiotherapy, radiology and pathology. MICE Toolkit provides advanced tools for complex processing and analysis which will simplify the work process and make it far less time consuming to generate results suited to the users particular needs â€“ be it further analysis or formal presentation of your research. Downloading The latest stable release of MICE Toolkit is version 1.1.0, you can download it here: Download Stable v1.1.0 Installing Install the software by running the downloaded .exe file. The installation requires approximately 1.5GB of free space. License To run the software a license is needed. If you don't have a license you can register for a lite license HERE. In order to use all features you need a premium license. You can order one HERE. The license is verified against a license server when you run the software. If you have a premium license you need an internet connection to get access to all of the features in your license. Virtual Machines You can use a lite license on a virtual machine, however the premium license can only be run on physical machines. If you need to use your premium license on a virtual machine, please contact us. Remote Desktop If you want to run MICE Toolkit via windows built in remote desktop (RDP) you need to start MICE Toolkit locally on the machine before you connect. This is due to the way windows handle graphics in the remote desktop software. Other remote desktop software like VNC seems to work fine. Hardware Requirements OS We recommend using Windows 10 but it will run on Windows 7, 8 and 8.1 as well. CPU MICE Toolkit uses the CPU with multiple threads for most of the processing so a fast multi core CPU is  preferred. Memory Image analysis is memory intense! We recommend at least 8GB of RAM for most applications. Graphics MICE Toolkit uses VTK to visualize images, so before deciding on a graphics card please read the following statement taken from the VTK/FAQ:  Modern graphics cards that supports OpenGL 2.1 or better typically provide all the functionality that VTK needs. However, there is good deal of variability in results across OS platform and vendor's OpenGL implementation. NVidia cards and drivers work the best. Intel HD integrated graphics and ATI Radeon HD devices and drivers are known to have a few issues. Mesa3D OpenGL although claiming support for a wide range of devices is highly unstable and the overall buggy-ness of their implementation changes daily and by renderer. Mesa's llvmpipe drivers are expected to generally work well.  Our experience tells us that cards from NVidia are the most compatible. Disk Space The installation requires approximately 1.5GB of free space. ", "tags": "", "url": "home.html?p1"},
{"title": "Getting Started", "text": "Getting Started 1. Building your first workflow  2. Introduction to nodes  3. The Visualizer  4. Nodes and status lights  5. Introduction to group nodes  6. Repeaters  7. Working with image databases  8. Import DICOM data to workflow  9. Expose node settings as node inputs  ", "tags": "", "url": "tutorials/videos/getting_started.html?p4"},
{"title": "Masks", "text": "Masks 1. Drawing custom masks  ", "tags": "", "url": "tutorials/videos/masks.html?p5"},
{"title": "1.1.0", "text": "1.1.0  In this version support for the old licensing system has been removed and keys generated in the old system will not work. If you are using and old key you need to create a new license account here to get a new free lite license. If you have a premium license in the old licensing system please contact us to receive your new license key. Changes  Improved reading performance for large structure sets. Changed the way the visualization image list is ordered, the most recently added item is now always at the bottom of the list. Changed the title of images in the visualizer to display the image name as title, the name of the output is now displayed below the title. Python plugin API changed, please see below. Added new metadata structure to images. Added passing of image metadata to plugin nodes. Added new image metadata viewer. Added functionality to connect several nodes to one input at the same time. Added NIfTI export. Added support for NIfTI metadata .json files. Added save warnings when closing the application or process tab. Added import of Open Slide images (microscopy). Added MR emulator. Added run button. Added save warnings when closing. Added simplified license sign-up. Added split panel between image sets and view-port items to improve scaling. Added create image node. Added new FFT nodes. Added basic support for reading &lsquo;Parametric Map&rsquo; type DICOM images containing float pixel data.  Bug Fixes  Fixed NIfTI import node not being able to parse certain orientations correctly. Fixed bug related to missing metadata in some images. Fixed license use for multiple users using the same machine. Fixed EUD normalization error. Fixed multiple inputs on plugin nodes. Fixed 2D/2D registration requiring 3D images. Fixed bug when batching MIQA database images with name &lsquo;No Description&rsquo;. Fixed saving bug in plugin editor where the asterisk indicating changes wasn't removed when saving. Fixed bool values in plugins to be either True or False, not 1 and 0. Fixed generation of the InputPaths variable in plugins.  General Changes  Updated SimpleITK to 1.2.0. Updated UI layout.  Plugins We have made substantial changes to the Python plugin API, so if you want to use your old plugins you will probably have to update the code. We have also added import and export of image metadata to all images sent to and from python and MATLAB plugins. Python API Changes The code now adheres to PEP8, which means that many methods and property names have changed slightly. A new module has been added, mtk.utils, which contains many of the methods and functions previously found in Image4D. Class mtk.image.Image4D Changes  Changed the constructor to only require shape and dtype parameters. All other parameters are optional. Changed shape, voxel_size and position are now given as a list or a tuple. Changed to_itk_image() to take one optional argument, frame, which selects the frame to send to SimpleITK. By default frame=0. Changed clone_empty() to take one optional argument dtype, which can be used to change the data type of the cloned image. Renamed method toItkImage() to to_itk_image(). Renamed method writemhd() to mtk.utils.write_mhd() and moved it to mtk.utils. Renamed readmhd() to tk.utils.read_mhd() and moved it to mtk.utils. Removed create(), create4d(), create3d(), create2d(). Please use the Image4D class constructor instead.  Additions  Added transpose(self, *axes). Returns a copy of the image with the axes transposed. Use this if you want to change the order of the image dimensions according to the optional input axes. Added method T(). This methods reverses the order of the axes. Support for metadata has been added. A metadata structure is exported to the python environment in a TypedList, where each element contains the metadata for each frame of the image.  Class mtk.utils  read_csv(filename, delimiter=&quot;;&quot;): Reads a csv file from disk. write_csv(data, filename, delimiter=&quot;;&quot;): Writes a csv file to disk. read_metadata(path): Read image metadata from an .xml file given in path. from_itk_image(itkimage): Convert a SimpleITK image to an Image4D class. valid_variable(variable_name): Checks if a variable name is valid in MICE/Python. valid_type(value): Checks if a variable has a valid type. TypedList(list): Creates a list datatype with strong typing. This datatype is used in the metadata representation. Struct(object): Creates a structure datatype from a dictionary. This datatype is used in the metadata representation.  Code Example # Image4D constructor image = mtk.image.Image4D([10, 10, 10, 3], name='Empty', dtype='bool')  # Show overview of image properties image print(image)  # Get shape, voxel size and position of image image.shape image.voxel_size image.position  # ITK conversion itk_image = image.to_itk_image() itk_image_frame = image.to_itk_image(frame=2) image_from_itk = mtk.utils.from_itk_image(itk_image_frame, dtype='float')  '''Create some metadata. A metadata structure, defined in mtk.utils.Struct  is compatible with a DICOM struct, but more flexible. Structs can contain fields,  Structs, and TypedLists. A TypedList is a list with strong typing, where each  element in must be of the same type. The metadata structure is stored in a  TypedList, where each frame has its own Struct.  ''' # Create a metadata struct, with fields common to all frames metadata_struct = mtk.utils.Struct(dict(PatientID='10',PatientName='Dummy'))  # Add a field to the metadata metadata_struct.Age = 77  # Clone metadata_struct in a TypedList metadata_list = mtk.utils.TypedList([metadata_struct]*3)  # Create a tag called &quot;Frame&quot;, that is different in each frame for i, _ in enumerate(metadata_list):     metadata_list[i].Frame = i  # Store metadata in the Image4D object      image.metadata = metadata_list  # Cloning mask = image.clone_empty(dtype='bool')  # Write to MHD. The metadata is written to an XML file.  mtk.utils.write_mhd(&quot;c:\\temp\\mhdimage.mhd&quot;, image) mhd_image = mtk.utils.read_mhd(&quot;c:\\temp\\mhdimage.mhd&quot;)  # Verify that the metadata is intact mhd_image.metadata[0].PatientName  ", "tags": "", "url": "changelog/1.1.0.html?p7"},
]};